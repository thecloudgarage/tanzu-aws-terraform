global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # Default ciphers to use on SSL-enabled listening sockets.
        # For more information, see ciphers(1SSL). This list is from:
        #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
        # An alternative list with additional directives can be obtained from
        #  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
        ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
        ssl-default-bind-options no-sslv3

defaults
        log     global
        mode    tcp
        option  tcplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
#        errorfile 400 /etc/haproxy/errors/400.http
#        errorfile 403 /etc/haproxy/errors/403.http
#        errorfile 408 /etc/haproxy/errors/408.http
#        errorfile 500 /etc/haproxy/errors/500.http
#        errorfile 502 /etc/haproxy/errors/502.http
#        errorfile 503 /etc/haproxy/errors/503.http
#        errorfile 504 /etc/haproxy/errors/504.http

#CONFGURE AND START DATA PLANE API

userlist haproxy-dataplaneapi
    user admin insecure-password admin

program api
   command /usr/bin/dataplaneapi --host 0.0.0.0 --port 5555 --haproxy-bin /usr/sbin/haproxy --config-file /etc/haproxy/haproxy.cfg --reload-cmd "kill -SIGUSR2 1" --reload-delay 5 --userlist haproxy-dataplaneapi
   no option start-on-reload

#http://dockerlabs.collabnix.com/kubernetes/beginners/Install-and-configure-a-multi-master-Kubernetes-cluster-with-kubeadm.html
#https://blog.entrostat.com/routing-multiple-domains-using-haproxy-http-and-https-ssl/
#NOTE: THE BELOW CONFIG IS TESTED AND WORKS PERFECTLY
#ENSURE THAT YOU ADD A DNS ENTRY *.pks.aws.thecloudgarage.com pointing towards the HA-PROXY HOST
#THIS CONFIG ENABLE A SINGLE FRONTEND AND BASED UPON THE DOMAIN CALL, IN THIS CASE THE HOSTNAME FOR THE MASTERS, THE KUBECTL CALL WILL BE ROUTED TO DIFFERENT BACKEND
frontend masters
bind 0.0.0.0:8443
tcp-request inspect-delay 3s
#Ensure all master api requests are accepted to our domain
acl tcp-request-content-wildcard req.ssl_sni -m reg -i ^[^\.]+\.pks.aws.thecloudgarage\.com(:[0-9]+)?$
tcp-request content accept if tcp-request-content-wildcard
#Configure acl and conditions to forward to correct backend based on SNI inspection
acl upgrade-test-one req.ssl_sni -i upgrade-test-one.pks.aws.thecloudgarage.com
#tcp-request content accept if upgrade-test-one
use_backend upgrade-test-one if upgrade-test-one
#THIS IS FOR OUR FIRST CLUSTER
backend upgrade-test-one
mode tcp
option tcp-check
server k8s-master-0 10.0.21.11:8443 check fall 3 rise 2
server k8s-master-1 10.0.21.12:8443 check fall 3 rise 2
server k8s-master-2 10.0.22.11:8443 check fall 3 rise 2
#LIKEWISE KEEP ADDING BACKENDS FOR EACH CLUSTER
#ADD THE APPROPRIATE ACL AND BACKEND RULE
